{"version":3,"sources":["components/Navigation/index.tsx","helpers/scroll.ts","apis/index.ts","components/StackSkeleton/index.tsx","components/TextListItem/index.tsx","components/Loader/index.tsx","pages/TextList/index.tsx","components/ImageListItem/index.tsx","pages/ImageList/index.tsx","pages/TextListVirtualized/index.tsx","pages/ImageListVirtualized/index.tsx","App.tsx","index.tsx"],"names":["Naviagation","className","columns","spacingX","spacingY","to","activeClassName","checkInfiniteScrollPosition","bottom","document","documentElement","scrollHeight","clientHeight","window","scrollY","API_DOMAIN","fetchComments","fetch","method","then","res","json","fetchPhotos","StackSkeleton","count","height","Array","from","length","map","_","index","TextListItem","email","name","body","Loader","textAlign","margin","speed","emptyColor","color","size","TextList","useState","list","setList","isFetching","setFetching","addList","useCallback","a","response","onScroll","useEffect","onScrollTrottle","throttle","addEventListener","passive","removeEventListener","padding","marginBottom","mb","colorScheme","onClick","fontSize","ImageListItem","imageUrl","title","onLoad","src","alt","totalList","ImageList","fetchData","data","splice","url","cellCache","CellMeasurerCache","fixedWidth","TextListVirtualized","listRef","useRef","rowRenderer","key","parent","style","cache","columnIndex","rowIndex","CheckCircle","scrollTop","isScrolling","onChildScroll","disableHeight","width","ref","autoHeight","overscanRowCount","rowCount","rowHeight","deferredMeasurementCache","ImageListVirtualized","measure","App","borderBottom","path","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2e6baa27.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport { SimpleGrid } from '@chakra-ui/react';\nimport './index.scss';\n\nconst Naviagation = () => {\n  return (\n    <SimpleGrid className=\"navigation\" columns={2} spacingX=\"5px\" spacingY=\"20px\">\n      <NavLink to=\"/text-list-virtualized\" activeClassName=\"selected\">\n        텍스트 목록 (with virtualized)\n      </NavLink>\n      <NavLink to=\"/text-list\" activeClassName=\"selected\">\n        텍스트 목록 (normal)\n      </NavLink>\n      <NavLink to=\"/image-list-virtualized\" activeClassName=\"selected\">\n        이미지 목록 (with virtualized)\n      </NavLink>\n      <NavLink to=\"/image-list\" activeClassName=\"selected\">\n        이미지 목록 (normal)\n      </NavLink>\n    </SimpleGrid>\n  );\n};\n\nexport default Naviagation;\n","/**\n * 무한스크롤 처리를 위한 스크롤 위치 체크\n */\nexport const checkInfiniteScrollPosition = ({ bottom = 800 }: { bottom?: number }) => {\n  const { scrollHeight, clientHeight } = document.documentElement;\n  const scrollTop = window.scrollY;\n  const targetTop = scrollHeight - bottom;\n  const currentTop = scrollTop + clientHeight;\n  return targetTop <= currentTop;\n};\n","const API_DOMAIN = 'https://jsonplaceholder.typicode.com';\n\nexport const fetchComments = () => {\n  return fetch(`${API_DOMAIN}/comments`, {\n    method: 'GET',\n  }).then((res) => res.json());\n};\n\nexport const fetchPhotos = () => {\n  return fetch(`${API_DOMAIN}/photos`, {\n    method: 'GET',\n  }).then((res) => res.json());\n};\n","import { Stack, Skeleton } from '@chakra-ui/react';\n\ninterface Props {\n  count?: number;\n  height?: number;\n}\n\nconst StackSkeleton = ({ count = 5, height = 150 }: Props) => {\n  return (\n    <Stack>\n      {Array.from({ length: count }).map((_, index) => (\n        <Skeleton height={height} key={index} />\n      ))}\n    </Stack>\n  );\n};\n\nexport default StackSkeleton;\n","import './index.scss';\n\ninterface Props {\n  index: number;\n  email: string;\n  name: string;\n  body: string;\n}\n\nconst TextListItem = ({ index, email, name, body }: Props) => {\n  return (\n    <div className=\"text-list-item\">\n      <p>index: {index}</p>\n      <p>email: {email}</p>\n      <p>name: {name}</p>\n      <p>body: {Array.from({ length: 2 }).map(() => body)}</p>\n    </div>\n  );\n};\n\nexport default TextListItem;\n","import { Spinner, Box } from '@chakra-ui/react';\n\nconst Loader = () => {\n  return (\n    <Box textAlign=\"center\" margin={6}>\n      <Spinner speed=\"0.65s\" emptyColor=\"gray.200\" color=\"blue.500\" size=\"lg\" />\n    </Box>\n  );\n};\n\nexport default Loader;\n","import { useEffect, useState, useCallback, Fragment } from 'react';\nimport { checkInfiniteScrollPosition } from '../../helpers/scroll';\nimport { throttle } from 'lodash-es';\nimport { fetchComments } from '../../apis';\n\nimport { Container, Heading, Button, Text } from '@chakra-ui/react';\nimport StackSkeleton from '../../components/StackSkeleton';\nimport TextListItem from '../../components/TextListItem';\nimport Loader from '../../components/Loader';\n\nexport interface TextListItemState {\n  id: number;\n  name: string;\n  email: string;\n  body: string;\n}\n\nconst TextList = () => {\n  const [list, setList] = useState<TextListItemState[]>([]);\n  const [isFetching, setFetching] = useState<boolean>(false);\n\n  const addList = useCallback(async () => {\n    setFetching(true);\n\n    const response = await fetchComments();\n    setList([...list, ...response]);\n    setFetching(false);\n  }, [list, setList]);\n\n  const onScroll = useCallback(() => {\n    if (isFetching) {\n      return false;\n    }\n\n    const isNeedFetching = checkInfiniteScrollPosition({ bottom: 600 });\n    if (isNeedFetching) {\n      addList();\n    }\n  }, [isFetching, addList]);\n\n  useEffect(() => {\n    addList();\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const onScrollTrottle = throttle(onScroll, 100);\n    window.addEventListener('scroll', onScrollTrottle, { passive: true });\n    return () => window.removeEventListener('scroll', onScrollTrottle);\n  }, [onScroll]);\n\n  return (\n    <>\n      <Container padding={0} marginBottom={5} textAlign=\"center\">\n        <Heading size=\"md\" mb={5} textAlign=\"center\">\n          react-virtualized (X)\n        </Heading>\n        <Button mb={5} colorScheme=\"blue\" onClick={addList}>\n          목록 추가하기\n        </Button>\n        <Text fontSize=\"20px\" color=\"tomato\">\n          현재목록: {list.length} 개\n        </Text>\n      </Container>\n\n      <section>\n        {list.length ? (\n          <>\n            {list.map(({ name, email, body }, index) => (\n              <Fragment key={index}>\n                <TextListItem index={index} email={email} name={name} body={body} />\n              </Fragment>\n            ))}\n            {isFetching && <Loader />}\n          </>\n        ) : (\n          <StackSkeleton count={5} />\n        )}\n      </section>\n    </>\n  );\n};\n\nexport default TextList;\n","import './index.scss';\n\ninterface Props {\n  index: number;\n  imageUrl: string;\n  title: string;\n  onLoad?: () => void;\n}\n\nconst ImageListItem = ({ index, imageUrl, title, onLoad }: Props) => {\n  return (\n    <div className=\"image-list-item\">\n      <section className=\"thumb-wrap\">\n        <img src={imageUrl} alt=\"\" onLoad={() => onLoad?.()} />\n      </section>\n      <section>\n        <p>index: {index}</p>\n        <p>{Array.from({ length: 10 }).map(() => title)}</p>\n      </section>\n    </div>\n  );\n};\n\nexport default ImageListItem;\n","import { useEffect, useState, useCallback } from 'react';\nimport { checkInfiniteScrollPosition } from '../../helpers/scroll';\nimport { throttle } from 'lodash-es';\nimport { fetchPhotos } from '../../apis';\n\nimport { Container, Heading, Button, Text } from '@chakra-ui/react';\nimport StackSkeleton from '../../components/StackSkeleton';\nimport ImageListItem from '../../components/ImageListItem';\n\nexport interface ImageListItemState {\n  id: number;\n  title: string;\n  url: string;\n  thumbnailUrl: string;\n}\n\nexport const SPLICE_SIZE = 500;\n\nlet totalList: ImageListItemState[] = [];\n\nconst ImageList = () => {\n  const [list, setList] = useState<ImageListItemState[]>([]);\n\n  const fetchData = useCallback(async () => {\n    const response = await fetchPhotos();\n    totalList = response;\n    addList();\n    // eslint-disable-next-line\n  }, []);\n\n  const addList = useCallback(() => {\n    if (!totalList.length) {\n      return;\n    }\n\n    const data = totalList.splice(0, SPLICE_SIZE);\n    setList([...list, ...data]);\n  }, [list]);\n\n  const onScroll = useCallback(() => {\n    const isNeedFetching = checkInfiniteScrollPosition({ bottom: 600 });\n    if (isNeedFetching) {\n      addList();\n    }\n  }, [addList]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  useEffect(() => {\n    const onScrollTrottle = throttle(onScroll, 100);\n    window.addEventListener('scroll', onScrollTrottle);\n    return () => window.removeEventListener('scroll', onScrollTrottle);\n  }, [onScroll]);\n\n  return (\n    <>\n      <Container padding={0} marginBottom={5} textAlign=\"center\">\n        <Heading size=\"md\" mb={5} textAlign=\"center\">\n          react-virtualized (X)\n        </Heading>\n        <Button mb={5} colorScheme=\"blue\" onClick={addList}>\n          목록 추가하기\n        </Button>\n        <Text fontSize=\"20px\" color=\"tomato\">\n          현재목록: {list.length} 개\n        </Text>\n      </Container>\n\n      <section>\n        {list.length ? (\n          <>\n            {list.map(({ title, url }, index) => (\n              <ImageListItem key={index} index={index} imageUrl={url} title={title} />\n            ))}\n          </>\n        ) : (\n          <StackSkeleton count={5} />\n        )}\n      </section>\n    </>\n  );\n};\n\nexport default ImageList;\n","import { useEffect, useState, useCallback, useRef } from 'react';\nimport { WindowScroller, CellMeasurer, CellMeasurerCache, AutoSizer, List, ListRowProps } from 'react-virtualized';\nimport { checkInfiniteScrollPosition } from '../../helpers/scroll';\nimport { throttle } from 'lodash-es';\nimport { fetchComments } from '../../apis';\n\nimport { Container, Heading, Button, Text } from '@chakra-ui/react';\nimport { CheckCircleIcon } from '@chakra-ui/icons';\nimport { TextListItemState } from '../TextList';\nimport StackSkeleton from '../../components/StackSkeleton';\nimport TextListItem from '../../components/TextListItem';\nimport Loader from '../../components/Loader';\n\nconst cellCache = new CellMeasurerCache({\n  fixedWidth: true,\n});\n\nconst TextListVirtualized = () => {\n  const [list, setList] = useState<TextListItemState[]>([]);\n  const [isFetching, setFetching] = useState<boolean>(false);\n  const listRef = useRef<List>(null);\n\n  const rowRenderer = ({ index, key, parent, style }: ListRowProps) => {\n    const { email, name, body } = list[index];\n    return (\n      <CellMeasurer cache={cellCache} parent={parent} key={key} columnIndex={0} rowIndex={index}>\n        <div style={style} key={index}>\n          <TextListItem index={index} email={email} name={name} body={body} />\n        </div>\n      </CellMeasurer>\n    );\n  };\n\n  const addList = useCallback(async () => {\n    setFetching(true);\n    const response = await fetchComments();\n    setList([...list, ...response]);\n    setFetching(false);\n  }, [list, setList]);\n\n  const onScroll = useCallback(() => {\n    if (isFetching) {\n      return false;\n    }\n\n    const isNeedFetching = checkInfiniteScrollPosition({ bottom: 600 });\n    if (isNeedFetching) {\n      addList();\n    }\n  }, [isFetching, addList]);\n\n  useEffect(() => {\n    addList();\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const onScrollTrottle = throttle(onScroll, 100);\n    window.addEventListener('scroll', onScrollTrottle, { passive: true });\n    return () => window.removeEventListener('scroll', onScrollTrottle);\n  }, [onScroll]);\n\n  return (\n    <>\n      <Container padding={0} marginBottom={5} textAlign=\"center\">\n        <Heading size=\"md\" mb={5} textAlign=\"center\">\n          react-virtualized (<CheckCircleIcon color=\"green.500\" />)\n        </Heading>\n        <Button mb={5} colorScheme=\"blue\" onClick={addList}>\n          목록 추가하기\n        </Button>\n        <Text fontSize=\"20px\" color=\"tomato\">\n          현재목록: {list.length} 개\n        </Text>\n      </Container>\n\n      <section>\n        {list.length ? (\n          <>\n            <WindowScroller>\n              {({ height, scrollTop, isScrolling, onChildScroll }) => (\n                <AutoSizer disableHeight>\n                  {({ width }) => (\n                    <List\n                      ref={listRef}\n                      autoHeight\n                      height={height}\n                      width={width}\n                      isScrolling={isScrolling}\n                      overscanRowCount={5} // overscanRowCount 속성은 사용자가 스크롤하는 방향으로 추가 행을 렌더링하여 사용자가 가상화된 콘텐츠를 렌더링할 수 있는 것보다 빠르게 스크롤시 깜빡임을 최소화합니다.\n                      onScroll={onChildScroll}\n                      scrollTop={scrollTop}\n                      rowCount={list.length}\n                      rowHeight={cellCache.rowHeight}\n                      rowRenderer={rowRenderer}\n                      deferredMeasurementCache={cellCache}\n                    />\n                  )}\n                </AutoSizer>\n              )}\n            </WindowScroller>\n            {isFetching && <Loader />}\n          </>\n        ) : (\n          <StackSkeleton count={5} />\n        )}\n      </section>\n    </>\n  );\n};\n\nexport default TextListVirtualized;\n","import { useEffect, useState, useCallback, useRef } from 'react';\nimport { WindowScroller, CellMeasurer, CellMeasurerCache, AutoSizer, List, ListRowProps } from 'react-virtualized';\nimport { checkInfiniteScrollPosition } from '../../helpers/scroll';\nimport { throttle } from 'lodash-es';\nimport { fetchPhotos } from '../../apis';\n\nimport { Container, Heading, Button, Text } from '@chakra-ui/react';\nimport { CheckCircleIcon } from '@chakra-ui/icons';\nimport { ImageListItemState, SPLICE_SIZE } from '../ImageList';\nimport ImageListItem from '../../components/ImageListItem';\nimport StackSkeleton from '../../components/StackSkeleton';\n\nconst cellCache = new CellMeasurerCache({\n  fixedWidth: true,\n});\n\nlet totalList: ImageListItemState[] = [];\n\nconst ImageListVirtualized = () => {\n  const [list, setList] = useState<ImageListItemState[]>([]);\n  const listRef = useRef<List>(null);\n\n  const rowRenderer = ({ index, key, parent, style }: ListRowProps) => {\n    const { title, url } = list[index];\n    return (\n      <CellMeasurer cache={cellCache} parent={parent} key={key} columnIndex={0} rowIndex={index}>\n        {({ measure }) => (\n          <div style={style} key={index}>\n            <ImageListItem\n              index={index}\n              title={title}\n              imageUrl={url}\n              onLoad={measure} // 중요: measure 함수로 이미지가 로드된 이후 재 측정을 해주어야 정확한 사이즈로 랜더링됩니다.\n            />\n          </div>\n        )}\n      </CellMeasurer>\n    );\n  };\n\n  const fetchData = useCallback(async () => {\n    const response = await fetchPhotos();\n    totalList = response;\n    addList();\n    // eslint-disable-next-line\n  }, []);\n\n  const addList = useCallback(() => {\n    if (!totalList.length) {\n      return;\n    }\n\n    const data = totalList.splice(0, SPLICE_SIZE);\n    setList([...list, ...data]);\n  }, [list]);\n\n  const onScroll = useCallback(() => {\n    const isNeedFetching = checkInfiniteScrollPosition({ bottom: 600 });\n    if (isNeedFetching) {\n      addList();\n    }\n  }, [addList]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  useEffect(() => {\n    const onScrollTrottle = throttle(onScroll, 100);\n    window.addEventListener('scroll', onScrollTrottle);\n    return () => window.removeEventListener('scroll', onScrollTrottle);\n  }, [onScroll]);\n\n  return (\n    <>\n      <Container padding={0} marginBottom={5} textAlign=\"center\">\n        <Heading size=\"md\" mb={5} textAlign=\"center\">\n          react-virtualized (<CheckCircleIcon color=\"green.500\" />)\n        </Heading>\n        <Button mb={5} colorScheme=\"blue\" onClick={addList}>\n          목록 추가하기\n        </Button>\n        <Text fontSize=\"20px\" color=\"tomato\">\n          현재목록: {list.length} 개\n        </Text>\n      </Container>\n\n      <section>\n        {list.length ? (\n          <WindowScroller>\n            {({ height, scrollTop, isScrolling, onChildScroll }) => (\n              <AutoSizer disableHeight>\n                {({ width }) => (\n                  <List\n                    ref={listRef}\n                    autoHeight\n                    height={height}\n                    width={width}\n                    overscanRowCount={5} // overscanRowCount 속성은 사용자가 스크롤하는 방향으로 추가 행을 렌더링하여 사용자가 가상화된 콘텐츠를 렌더링할 수 있는 것보다 빠르게 스크롤시 깜빡임을 최소화합니다.\n                    isScrolling={isScrolling}\n                    onScroll={onChildScroll}\n                    scrollTop={scrollTop}\n                    rowCount={list.length}\n                    rowHeight={cellCache.rowHeight}\n                    rowRenderer={rowRenderer}\n                    deferredMeasurementCache={cellCache}\n                  />\n                )}\n              </AutoSizer>\n            )}\n          </WindowScroller>\n        ) : (\n          <StackSkeleton count={5} />\n        )}\n      </section>\n    </>\n  );\n};\n\nexport default ImageListVirtualized;\n","import { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { ChakraProvider, Flex, Container, Heading } from '@chakra-ui/react';\n\nimport Navigation from './components/Navigation';\nimport TextList from './pages/TextList';\nimport ImageList from './pages/ImageList';\nimport TextListVirtualized from './pages/TextListVirtualized';\nimport ImageListVirtualized from './pages/ImageListVirtualized';\n\nconst App = () => {\n  return (\n    <ChakraProvider>\n      <Flex>\n        <Container width=\"700px\" padding={`20px 15px`}>\n          <Router>\n            <Container padding={`0 0 20px 0`} marginBottom={5} borderBottom={'solid 1px #bbb'}>\n              <Heading mb={5} textAlign=\"center\">\n                React virtualized examples\n              </Heading>\n              <Navigation />\n            </Container>\n            <Switch>\n              <Route path=\"/text-list\" component={TextList} />\n              <Route path=\"/image-list\" component={ImageList} />\n              <Route path=\"/text-list-virtualized\" component={TextListVirtualized} />\n              <Route path=\"/image-list-virtualized\" component={ImageListVirtualized} />\n              <Redirect to=\"/text-list-virtualized\" />\n            </Switch>\n          </Router>\n        </Container>\n      </Flex>\n    </ChakraProvider>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}